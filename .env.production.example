# Production Environment Configuration
# Copy this file to .env.production and configure your values

#==============================================================================
# Server Configuration
#==============================================================================
NODE_ENV=production
SERVER_HOST=0.0.0.0
SERVER_PORT=3000
LOG_LEVEL=info

# Disable pretty logging for production performance
DISABLE_PRETTY_LOGGING=true

#==============================================================================
# Security Configuration
#==============================================================================
# IMPORTANT: Use strong, unique API keys for production
ADMIN_API_KEY=prod-api-key-1,prod-api-key-2,prod-api-key-3

#==============================================================================
# Performance Configuration
#==============================================================================
# Enable high-throughput mode for production workloads
PERFORMANCE_MODE=high_throughput
LIGHTWEIGHT_VALIDATION=true
DISABLE_DEBUG_LOGGING=true
MAX_CONCURRENT_REQUESTS=100

#==============================================================================
# Provider Credentials
#==============================================================================
# OpenAI
OPENAI_API_KEY=sk-prod-your-openai-api-key

# Anthropic
ANTHROPIC_API_KEY=sk-ant-prod-your-anthropic-api-key

# AWS Bedrock
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=AKIA1234567890ABCDEF
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key

# Google Vertex AI
GOOGLE_PROJECT_ID=your-google-project-id
GOOGLE_SERVICE_ACCOUNT_KEY='{"type":"service_account",...}'

# Azure OpenAI
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com
AZURE_OPENAI_API_KEY=your-azure-api-key

# Together AI
TOGETHER_API_KEY=your-together-api-key

# RunPod
RUNPOD_API_KEY=your-runpod-api-key

#==============================================================================
# Model Configuration (Production Example)
#==============================================================================
MODEL_DEFINITIONS='{
  "credentialStores": {
    "openai-prod": {
      "type": "simple",
      "source": "env",
      "config": {
        "apiKeyVar": "OPENAI_API_KEY"
      },
      "cacheTtl": 3600
    },
    "anthropic-prod": {
      "type": "simple", 
      "source": "env",
      "config": {
        "apiKeyVar": "ANTHROPIC_API_KEY"
      },
      "cacheTtl": 3600
    },
    "aws-bedrock-prod": {
      "type": "aws",
      "source": "env", 
      "config": {
        "regionVar": "AWS_REGION",
        "accessKeyIdVar": "AWS_ACCESS_KEY_ID",
        "secretAccessKeyVar": "AWS_SECRET_ACCESS_KEY"
      },
      "cacheTtl": 1800
    }
  },
  "models": {
    "gpt-4o": {
      "name": "gpt-4o",
      "providers": [
        {
          "name": "openai-primary",
          "provider": "openai",
          "credentialsRef": "openai-prod",
          "apiBase": "https://api.openai.com/v1",
          "modelName": "gpt-4o",
          "priority": 1,
          "weight": 100
        }
      ],
      "circuitBreaker": {
        "enabled": true,
        "failureThreshold": 5,
        "resetTimeout": 300000,
        "permanentFailureHandling": {
          "enabled": true,
          "timeoutMultiplier": 5,
          "baseTimeoutMs": 300000,
          "maxBackoffMultiplier": 4
        }
      }
    },
    "claude-3-5-sonnet": {
      "name": "claude-3-5-sonnet", 
      "providers": [
        {
          "name": "anthropic-primary",
          "provider": "anthropic",
          "credentialsRef": "anthropic-prod",
          "apiBase": "https://api.anthropic.com",
          "modelName": "claude-3-5-sonnet-20241022",
          "priority": 1
        },
        {
          "name": "bedrock-fallback",
          "provider": "bedrock",
          "credentialsRef": "aws-bedrock-prod", 
          "apiBase": "https://bedrock-runtime.us-east-1.amazonaws.com",
          "modelName": "anthropic.claude-3-5-sonnet-20241022-v2:0",
          "priority": 2
        }
      ],
      "circuitBreaker": {
        "enabled": true,
        "failureThreshold": 5,
        "resetTimeout": 300000,
        "permanentFailureHandling": {
          "enabled": true,
          "timeoutMultiplier": 5,
          "baseTimeoutMs": 300000,
          "maxBackoffMultiplier": 4
        }
      }
    }
  }
}'

#==============================================================================
# Circuit Breaker Configuration
#==============================================================================
# Permanent failure handling (recommended for production)
PERMANENT_FAILURE_ENABLED=true
PERMANENT_FAILURE_TIMEOUT_MULTIPLIER=5
PERMANENT_FAILURE_BASE_TIMEOUT_MS=300000
PERMANENT_FAILURE_MAX_BACKOFF_MULTIPLIER=4
PERMANENT_FAILURE_ERROR_PATTERNS="404.*not found,401.*unauthorized,403.*forbidden"

#==============================================================================
# Monitoring & Observability
#==============================================================================
# Enable Prometheus metrics endpoint
PROMETHEUS_METRICS_ENABLED=true
PROMETHEUS_METRICS_PORT=9090

# Health check configuration
HEALTH_CHECK_INTERVAL=30000
HEALTH_CHECK_TIMEOUT=10000

#==============================================================================
# Security Headers & CORS
#==============================================================================
# Configure CORS for production (adjust domains as needed)
CORS_ORIGIN="https://yourdomain.com,https://app.yourdomain.com"
CORS_METHODS="GET,POST,OPTIONS"
CORS_HEADERS="Content-Type,Authorization,x-api-key"

# Security headers
SECURITY_HEADERS_ENABLED=true